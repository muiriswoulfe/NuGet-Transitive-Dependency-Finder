// <copyright file="DependencyGraphTests.cs" company="Muiris Woulfe">
// Â© Muiris Woulfe
// Licensed under the MIT License
// </copyright>

namespace NuGetTransitiveDependencyFinder.UnitTests.ProjectAnalysis;

// using System;
// using System.IO;
// using NuGetTransitiveDependencyFinder.ProjectAnalysis;
// using Xunit;

public class DependencyGraphTests //: IDisposable
{
     private readonly DependencyGraph dependencyGraph;

//     public DependencyGraphTests()
//     {
//         var testProjectPath = Path.Combine(Path.GetTempPath(), "TestProject");
//         var testSolutionPath = Path.Combine(Path.GetTempPath(), "TestSolution.sln");

//         // Create a test project and solution
//         Directory.CreateDirectory(_testProjectPath);
//         File.WriteAllText(Path.Combine(_testProjectPath, "TestProject.csproj"), "<Project></Project>");
//         File.WriteAllText(_testSolutionPath, "Microsoft Visual Studio Solution File, Format Version 12.00");

//         this.dependencyGraph = new DependencyGraph(new DotNetRunner());
//     }

//     [Fact]
//     public void DependencyGraph_CanBeCreated()
//     {
//         Assert.NotNull(_dependencyGraph);
//     }

//     [Fact]
//     public void DependencyGraph_Dispose_DeletesTemporaryFile()
//     {
//         _dependencyGraph.Dispose();

//         Assert.False(File.Exists(_dependencyGraph.FilePath));
//     }

//     [Fact]
//     public void DependencyGraph_GetDependencyGraph_ReturnsDependencyGraph()
//     {
//         var dependencyGraphSpec = _dependencyGraph.GetDependencyGraph(_testProjectPath, _testSolutionPath);

//         Assert.NotNull(dependencyGraphSpec);
//         Assert.NotNull(dependencyGraphSpec.Projects);
//         Assert.Empty(dependencyGraphSpec.Projects);
//     }

//     [Fact]
//     public void DependencyGraph_GetDependencyGraph_ThrowsArgumentNullException_WhenProjectPathIsNull()
//     {
//         Assert.Throws<ArgumentNullException>(() => _dependencyGraph.GetDependencyGraph(null, _testSolutionPath));
//     }

//     [Fact]
//     public void DependencyGraph_GetDependencyGraph_ThrowsArgumentNullException_WhenSolutionPathIsNull()
//     {
//         Assert.Throws<ArgumentNullException>(() => _dependencyGraph.GetDependencyGraph(_testProjectPath, null));
//     }

//     [Fact]
//     public void DependencyGraph_GetDependencyGraph_ThrowsFileNotFoundException_WhenProjectPathDoesNotExist()
//     {
//         Assert.Throws<FileNotFoundException>(() => _dependencyGraph.GetDependencyGraph("NonExistentProjectPath", _testSolutionPath));
//     }

//     [Fact]
//     public void DependencyGraph_GetDependencyGraph_ThrowsFileNotFoundException_WhenSolutionPathDoesNotExist()
//     {
//         Assert.Throws<FileNotFoundException>(() => _dependencyGraph.GetDependencyGraph(_testProjectPath, "NonExistentSolutionPath"));
//     }

//     [Fact]
//     public void DependencyGraph_GetDependencyGraph_ThrowsInvalidOperationException_WhenDotNetCommandFails()
//     {
//         Assert.Throws<InvalidOperationException>(() => _dependencyGraph.GetDependencyGraph("InvalidProjectPath", _testSolutionPath));
//     }

//     [Fact]
//     public void DependencyGraph_GetTransitiveDependencies_ReturnsTransitiveDependencies()
//     {
//         var dependencyGraphSpec = _dependencyGraph.GetDependencyGraph(_testProjectPath, _testSolutionPath);
//         var transitiveDependencies = _dependencyGraph.GetTransitiveDependencies(dependencyGraphSpec, "TestProject");

//         Assert.NotNull(transitiveDependencies);
//         Assert.Empty(transitiveDependencies);
//     }

//     [Fact]
//     public void DependencyGraph_GetTransitiveDependencies_ThrowsArgumentNullException_WhenDependencyGraphSpecIsNull()
//     {
//         Assert.Throws<ArgumentNullException>(() => _dependencyGraph.GetTransitiveDependencies(null, "TestProject"));
//     }

//     [Fact]
//     public void DependencyGraph_GetTransitiveDependencies_ThrowsArgumentNullException_WhenProjectNameIsNull()
//     {
//         var dependencyGraphSpec = _dependencyGraph.GetDependencyGraph(_testProjectPath, _testSolutionPath);

//         Assert.Throws<ArgumentNullException>(() => _dependencyGraph.GetTransitiveDependencies(dependencyGraphSpec, null));
//     }

//     [Fact]
//     public void DependencyGraph_GetTransitiveDependencies_ThrowsArgumentException_WhenProjectNameIsEmpty()
//     {
//         var dependencyGraphSpec = _dependencyGraph.GetDependencyGraph(_testProjectPath, _testSolutionPath);

//         Assert.Throws<ArgumentException>(() => _dependencyGraph.GetTransitiveDependencies(dependencyGraphSpec, string.Empty));
//     }

//     [Fact]
//     public void DependencyGraph_GetTransitiveDependencies_ThrowsArgumentException_WhenProjectNameIsNotFound()
//     {
//         var dependencyGraphSpec = _dependencyGraph.GetDependencyGraph(_testProjectPath, _testSolutionPath);

//         Assert.Throws<ArgumentException>(() => _dependencyGraph.GetTransitiveDependencies(dependencyGraphSpec, "NonExistentProject"));
//     }

//     public void Dispose()
//     {
//         _dependencyGraph.Dispose();
//         Directory.Delete(_testProjectPath, true);
//         File.Delete(_testSolutionPath);
//     }
}
