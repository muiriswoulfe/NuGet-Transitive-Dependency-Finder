# © Muiris Woulfe
# Licensed under the MIT License

name: Build

on:
  push:
  schedule:
    - cron: '0 0 * * 1'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: Install .NET
      uses: actions/setup-dotnet@v1
    - name: Install NuGet Dependencies
      run: dotnet restore
    - name: Build – ${{ matrix.configuration }}
      run: >-
        dotnet build
        --configuration ${{ matrix.configuration }}
        --no-restore
        /maxCpuCount

  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: CodeQL – Initialize
      uses: github/codeql-action/init@v1
      with:
        languages: csharp
        queries: security-extended,security-and-quality
    - name: CodeQL – Build
      uses: github/codeql-action/autobuild@v1
    - name: CodeQL – Analyze
      uses: github/codeql-action/analyze@v1
    - name: CodeQL – Upload Report
      uses: github/codeql-action/upload-sarif@v1

  codacy-security-scan:
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v2

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@1.1.0
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif

  # This workflow contains a single job called "build"
  cs-flow:
    # The type of runner that the job will run on - Ubuntu is required as Docker is leveraged for the action
    runs-on: ubuntu-latest

    # Steps require - checkout code, run CxFlow Action, Upload SARIF report (optional)
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    # Runs the Checkmarx Scan leveraging the latest version of CxFlow - REFER to Action README for list of inputs
    - name: Checkmarx CxFlow Action
      uses: checkmarx-ts/checkmarx-cxflow-github-action@v1.0
      with:
        project: GithubActionTest
        team: '\CxServer\SP\Checkmarx'
        checkmarx_url: ${{ secrets.CHECKMARX_URL }}
        checkmarx_username: ${{ secrets.CHECKMARX_USERNAME }}
        checkmarx_password: ${{ secrets.CHECKMARX_PASSWORD }}
        checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }}
    # Upload the Report for CodeQL/Security Alerts
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: cx.sarif

  Scan-Build:
    # Scan runs on ubuntu, mac and windows
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    # Instructions
    # 1. Setup JDK, Node.js, Python etc depending on your project type
    # 2. Compile or build the project before invoking scan
    #    Example: mvn compile, or npm install or pip install goes here
    # 3. Invoke Scan with the github token. Leave the workspace empty to use relative url

    - name: Perform Scan
      uses: ShiftLeftSecurity/scan-action@master
      env:
        WORKSPACE: ""
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SCAN_AUTO_BUILD: true
      with:
        output: reports
        # Scan auto-detects the languages in your project. To override uncomment the below variable and set the type
        # type: credscan,java
        # type: python

    - name: Upload report
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: reports

  FoD-SAST-Scan:
    # Use the appropriate runner for building your source code.
    # TODO: Use a Windows runner for .NET projects that use msbuild. Additional changes to RUN commands will be required to switch to Windows syntax.
    runs-on: ubuntu-latest

    steps:
      # Check out source code
      - name: Check Out Source Code
        uses: actions/checkout@v2
        with:
          # Fetch at least the immediate parents so that if this is a pull request then we can checkout the head.
          fetch-depth: 2
      # If this run was triggered by a pull request event, then checkout the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}
      # Java 8 required by ScanCentral Client and FoD Uploader(Univeral CI Tool)
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Prepare source+dependencies for upload. The default example is for a Maven project that uses pom.xml.
      # TODO: Update PACKAGE_OPTS based on the ScanCentral Client documentation for your project's included tech stack(s). Helpful hints:
      #   ScanCentral Client will download dependencies for maven (-bt mvn) and gradle (-bt gradle).
      #   ScanCentral Client can download dependencies for msbuild projects (-bt msbuild); however, you must convert the workflow to use a Windows runner.
      #   ScanCentral has additional options that should be set for PHP and Python projects
      #   For other build tools, add your build commands to download necessary dependencies and prepare according to Fortify on Demand Packaging documentation.
      #   ScanCentral Client documentation is located at https://www.microfocus.com/documentation/fortify-software-security-center/
      - name: Download Fortify ScanCentral Client
        uses: fortify/gha-setup-scancentral-client@v1
      - name: Package Code + Dependencies
        run: scancentral package $PACKAGE_OPTS -o package.zip
        env:
          PACKAGE_OPTS: "-bt mvn"

      # Start Fortify on Demand SAST scan and wait until results complete. For more information on FoDUploader commands, see https://github.com/fod-dev/fod-uploader-java
      # TODO: Update ENV variables for your application and create the necessary GitHub Secrets.  Helpful hints:
      #   Credentials and release ID should be obtained from your FoD tenant (either Personal Access Token or API Key can be used).
      #   Automated Audit preference should be configured for the release's Static Scan Settings in the Fortify on Demand portal.
      - name: Download Fortify on Demand Universal CI Tool
        uses: fortify/gha-setup-fod-uploader@v1
      - name: Perform SAST Scan
        run: java -jar $FOD_UPLOAD_JAR -z package.zip -aurl $FOD_API_URL -purl $FOD_URL -rid "$FOD_RELEASE_ID" -tc "$FOD_TENANT" -uc "$FOD_USER" "$FOD_PAT" $FOD_UPLOADER_OPTS -n "$FOD_UPLOADER_NOTES"
        env:
          FOD_TENANT: ${{ secrets.FOD_TENANT }}
          FOD_USER: ${{ secrets.FOD_USER }}
          FOD_PAT: ${{ secrets.FOD_PAT }}
          FOD_RELEASE_ID: ${{ secrets.FOD_RELEASE_ID }}
          FOD_URL: "https://ams.fortify.com/"
          FOD_API_URL: "https://api.ams.fortify.com/"
          FOD_UPLOADER_OPTS: "-ep 2 -pp 0 -I 1 -apf"
          FOD_UPLOADER_NOTES: 'Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'

      # Once scan completes, pull SAST issues from Fortify on Demand and generate SARIF output.
      # TODO: Review Action inputs. For most users, these will be the same as used in the Perform SAST Scan step.
      - name: Download Results
        uses: fortify/gha-fod-generate-sarif@1.1.0
        with:
          base-url: https://ams.fortify.com
          tenant: ${{ secrets.FOD_TENANT }}
          user: ${{ secrets.FOD_USER }}
          password: ${{ secrets.FOD_PAT }}
          release-id: ${{ secrets.FOD_RELEASE_ID }}
          output: ./sarif/output.sarif

      # Import Fortify on Demand results to GitHub Security Code Scanning
      - name: Import Results
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ./sarif/output.sarif


  # This workflow contains a job to build and submit pipeline scan, you will need to customize the build process accordingly and make sure the artifact you build is used as the file input to the pipeline scan file parameter
  build-and-pipeline-scan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it and copies all sources into ZIP file for submitting for analysis. Replace this section with your applications build steps
    - uses: actions/checkout@v2
      with:
        repository: ''

    - uses: papeloto/action-zip@v1
      with:
        files: /
        recursive: true
        dest: veracode-pipeline-scan-results-to-sarif.zip

    - uses: actions/upload-artifact@v1
      with:
        name: my-artifact
        path: veracode-pipeline-scan-results-to-sarif.zip

    # download the Veracode Static Analysis Pipeline scan jar
    - uses: wei/curl@master
      with:
        args: -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
    - run: unzip -o pipeline-scan-LATEST.zip

    - uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - run: java -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --fail_on_severity="Very High, High" --file veracode-pipeline-scan-results-to-sarif.zip
      continue-on-error: true
    - uses: actions/upload-artifact@v1
      with:
        name: ScanResults
        path: results.json
    - name: Convert pipeline scan output to SARIF format
      id: convert
      uses: veracode/veracode-pipeline-scan-results-to-sarif@master
      with:
        pipeline-results-json: results.json
    - uses: github/codeql-action/upload-sarif@v1
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: veracode-results.sarif

  validate:
    name: Validate
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: EditorConfig – Download
      run: >-
        curl -L
        ${{ github.server_url }}/editorconfig-checker/editorconfig-checker/releases/download/2.2.0/ec-linux-amd64.tar.gz
        > ec-linux-amd64.tar.gz
    - name: EditorConfig – Extract
      run: tar zxvf ec-linux-amd64.tar.gz
    - name: EditorConfig – Validate
      run: ./bin/ec-linux-amd64
    - name: Markdown – Validate
      uses: actionshub/markdownlint@1.2.2
    - name: Markdown – Validate .github
      uses: actionshub/markdownlint@1.2.2
      with:
        path: ./.github
    - name: Markdown – Validate Links
      uses: gaurav-nelson/github-action-markdown-link-check@1.0.8
